/* 
  StudyList.strings
  Algorithm_C

  Created by CHM on 2020/7/10.
  Copyright © 2020 CHM. All rights reserved.
*/

7.9:
1. 学习 C++ 的 vector、stack、queue 文档，牢记它们的使用，为下面的算法使用做好铺垫。
2. 反转二叉树。
3. 找到链表中倒数第 k 个节点。
4. 青蛙跳台阶。
5. 重写赋值运算符。
6. 数组中重复的数字。
7. 堆排序加深理解以及其它排序的复习。

7.10:
1. 学习 C++ 中哈希表的使用。
2. 不修改数组找出重复的数字。
3. 二维数组中的查找。
4. 替换空格。
5. 往链表的末尾添加一个节点。
6. 在链表中找到第一个含有某值的节点并删除该节点。
7. 从尾到头打印链表。
8. 根据前序和中序结果重建二叉树。

7.11:
1. 二叉树的下一个节点。
2. 用两个栈实现队列。
3. 算法和数据操作部分提到了回溯法和动态规划以及贪婪算法，对它们的认识需要加强。
4. 递归和循环。递归由于是函数调用自身，而函数调用是有时间和空间的消耗的：每一次函数调用，
   都需要在内存栈中分配空间以保存参数、返回地址及临时变量，而且往栈里压入数据和弹出数据都需要时间。
5. 递归和非递归的方式求 1 + 2 + 3 + ... + n 的值。
6. 斐波那契数列。

7.12:
1. 全部复习默写。
...

7.13:

// 对任何问题首先两个思考：
// 1. 判断入参是否合规。
// 2. 准备下个函数要使用的参数。

1. 旋转数组的最小数字。
2. 对公司员工年龄排序（计数排序）。
3. 矩阵中的路径。
4. 机器人的运动范围。
5. 剪绳子。
6. 二进制中 1 的个数。
7. 用一条语句判断一个整数是不是 2 整数次方。一个整数如果是 2 的整数次方，那么它的二进制表示中有且只有一位是 1，其它位都是 0。
if ((n - 1) & n == 0) { return true;}
8. 输入两个整数 m 和 n，计算需要改变 m 的二进制表示中的多少位才能得到 n。
比如 10 的二进制表示为 1010，13 的二进制表示为 1101，需要改变 1010 中的 3 位才能得到 1101。
我们可以分为两步解决这个问题：第一步求这两个数的异或；第二步统计异或结果中 1 的位数。（相同为假，不同为真）。

7.14:
1. 求数值的整数次方，不得使用库函数，不需要考虑大数问题。
2.




